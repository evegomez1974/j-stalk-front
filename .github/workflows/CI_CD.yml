# This is a basic workflow to help you get started with Actions

name: CI
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: ["develop", "gh-pages"]
  pull_request:
    branches: ["develop"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      typeDeploy:
        description: 'Update deploy'
        required: false
        default: preview
        type: choice
        options:
        - preview
        - production
      version:
        description: 'Update version'
        required: false
        default: ''
        type: choice
        options:
        - ''
        - patch
        - minor
        - major
        visible: ${{ github.event.inputs.typeDeploy == 'production' }}

#authorization to private github
permissions:
  contents: write
  actions: write
  checks: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Configure Node
      uses: actions/setup-node@v4
      with:
        node-version: 20
    - uses: actions/setup-python@v3
    - uses: pre-commit/action@v3.0.0

  verifications:
    runs-on: ubuntu-latest
    needs: [ pre-commit ]
    name: Vérifications
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v4
        with:
          show-progress: false
      - name: Configure Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      # Runs a single command using the runners shell
      - name: Install dependencies
        run: npm ci
      - name: Run TU
        run: npm run test:coverage
      - name: Run lint
        run: npm run lint
      - name: Publish TU Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Vitest Tests                  # Name of the check run which will be created
          path: testsReports/test-junit.xml      # Path to test results (inside artifact .zip)
          reporter: jest-junit              # Format of test results

  build:
    runs-on: ubuntu-latest
    needs: [ verifications ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install nuxt
        run: npm install nuxt
      - name: Run a one-line script
        run: npm run build

  deploy_preview:
    if: ${{ github.event.inputs.version == '' }}
    runs-on: ubuntu-latest
    needs: [ build ]
    environment:
      name: Preview Deploiement
      url: https://j-stalk-front-evegomez-ynovcom-j-stalk-fronts-projects.vercel.app/
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  new-release:
    if: ${{ github.event.inputs.version != '' }}
    runs-on: ubuntu-latest
    needs: [ build ]
    permissions:
      contents: write
    outputs:
      outputTag: ${{ steps.get_last_tag.outputs.tag }}
    steps:
      - run : npm cache clean --force
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          echo "Update version: $VERSION"
        env:
          VERSION: ${{ inputs.version }}

      - name: Incrémenter la version
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          npm version $VERSION
          git push --tags origin develop
        env:
          VERSION: ${{ inputs.version }}
      - name: Récupérer le dernier tag
        id: get_last_tag
        run: echo "tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.get_last_tag.outputs.tag }}
        run: |
          gh release create "$tag" \
            --repo="$GITHUB_REPOSITORY" \
            --title="${tag}" \
            --generate-notes

  deploy_npm:
    if: ${{ github.event.inputs.version != '' }}
    runs-on: ubuntu-latest
    needs: [ new-release ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.new-release.outputs.outputTag}}
      - name: Package Node
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH }}

  deploy_vercel:
    if: ${{ github.event.inputs.version != '' }}
    runs-on: ubuntu-latest
    needs: [ new-release ]
    permissions:
      contents: read
    environment:
      name: Vercel Deploiement
      url: https://j-stalk-front.vercel.app/
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.new-release.outputs.outputTag}}
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy_mkdocs:
    if: ${{ github.event.inputs.version != '' }}
    needs: [ new-release ]
    permissions:
      id-token: write
      pages: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          token: "${{ secrets.PAT }}"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install Mkdocs
        run: pip install -r requirements.txt
      - name: Build Mkdocs
        run: mkdocs build --config-file docs/mkdocs.yml
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/site
      - name: Deploy to Github Pages
        uses: actions/deploy-pages@v4
