# This is a basic workflow to help you get started with Actions

name: CI
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: ["develop", "gh-pages"]
  pull_request:
    branches: ["develop"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      version:
        description: 'Update version'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

#authorization to private github
permissions:
  contents: write
  actions: write
  checks: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # pre-commit:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v4
  #   - name: Configure Node
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 20
  #   - uses: actions/setup-python@v3
  #   - uses: pre-commit/action@v3.0.0

  # verifications:
  #   runs-on: ubuntu-latest
  #   needs: [ pre-commit ]
  #   name: Vérifications
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         show-progress: false
  #     - name: Configure Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     # Runs a single command using the runners shell
  #     - name: Install dependencies
  #       run: npm ci
  #     - name: Run TU
  #       run: npm run test:coverage
  #     - name: Run lint
  #       run: npm run lint
  #     - name: Publish TU Report
  #       uses: dorny/test-reporter@v1
  #       if: success() || failure()
  #       with:
  #         name: Vitest Tests                  # Name of the check run which will be created
  #         path: testsReports/test-junit.xml      # Path to test results (inside artifact .zip)
  #         reporter: jest-junit              # Format of test results

  # build:
  #   runs-on: ubuntu-latest
  #   needs: [ verifications ]
  #   steps:
  #     # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Configure Node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     - name: Install nuxt
  #       run: npm install nuxt
  #     - name: Run a one-line script
  #       run: npm run build

  create_and_publish_new_version:
      if: github.event_name == 'workflow_dispatch'
      runs-on: ubuntu-latest
      # needs: [ build ]
      environment:
        name: Vercel Deploiement
        url: https://j-stalk-front.vercel.app/
      permissions:
        contents: write
      steps:
        - run : npm cache clean --force
        - name: Checkout
          uses: actions/checkout@v4
        - name: Configure Node
          uses: actions/setup-node@v4
          with:
            node-version: 20
        - run: |
            echo "Update version: $VERSION"
          env:
            VERSION: ${{ inputs.version }}

        - name: Incrémenter la version
          run: |
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            npm version $VERSION
            git push --tags origin develop
          env:
            VERSION: ${{ inputs.version }}
        - name: Récupérer le dernier tag
          id: get_last_tag
          run: echo "tag=$(git describe --tags --abbrev=0)" >> "$GITHUB_OUTPUT"
        # - name: Créer une release
        #   id: create_release
        #   uses: actions/create-release@v1
        #   env:
        #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        #   with:
        #     tag_name: ${{ steps.get_last_tag.outputs.tag }}
        #     release_name: Release ${{ steps.get_last_tag.outputs.tag }}
        #     body: |
        #       Nouvelle release publiée
        #     draft: false
        #     prerelease: false
        - name: Create release
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            tag: ${{ steps.get_last_tag.outputs.tag }}
          run: |
            gh release create "$tag" \
              --repo="$GITHUB_REPOSITORY" \
              --title="Release ${tag#v}" \
              --generate-notes
        - name: Package Node
          uses: actions/setup-node@v3
          with:
            node-version: '20.x'
            registry-url: 'https://registry.npmjs.org'
        - run: npm publish --access public
          env:
            NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH }}
        - name: Install Vercel CLI
          run: npm install --global vercel@latest
        - name: Pull Vercel Environment Information
          run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        - name: Build Project Artifacts
          run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        - name: Deploy Project Artifacts to Vercel
          run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}


  # Deploy-Production:
  #   if: github.event_name == 'workflow_dispatch'
  #   runs-on: ubuntu-latest
  #   needs: [ create_and_publish_new_version ]
  #   permissions:
  #     contents: read
  #   environment:
  #     name: Vercel Deploiement
  #     url: https://j-stalk-front.vercel.app/
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@latest
  #     - name: Pull Vercel Environment Information
  #       run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Build Project Artifacts
  #       run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Deploy Project Artifacts to Vercel
  #       run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy_mkdocs:
    if: github.event_name == 'workflow_dispatch'
    needs: [ create_and_publish_new_version ]
    permissions:
      id-token: write
      pages: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          token: "${{ secrets.PAT }}"
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install Mkdocs
        run: pip install -r requirements.txt
      - name: Build Mkdocs
        run: mkdocs build --config-file docs/mkdocs.yml
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/site
      - name: Deploy to Github Pages
        uses: actions/deploy-pages@v4

  # release:
  #   name: Release
  #   runs-on: ubuntu-latest
  #   needs: [ build ]
  #   permissions:
  #     contents: write # to be able to publish a GitHub release
  #     issues: write # to be able to comment on released issues
  #     pull-requests: write # to be able to comment on released pull requests
  #     id-token: write # to enable use of OIDC for npm provenance
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     - name: Install dependencies
  #       run: npm clean-install
  #     - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
  #       run: npm audit signatures
  #     - name: Release
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.PAT }}
  #         NPM_TOKEN: ${{ secrets.NPM_PUBLISH }}
  #       run: npm run release
